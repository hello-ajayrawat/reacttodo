{"version":3,"sources":["components/Todos/TodoItem/TodoItem.module.css","containers/TodoController/TodoController.module.css","components/UI/Modal/Modal.module.css","components/UI/Backdrop/Backdrop.module.css","hoc/Auxx/Auxx.js","components/UI/Modal/Modal.js","components/UI/Backdrop/Backdrop.js","hoc/Layout/Layout.js","components/UI/Button/Button.js","components/UI/Checkbox/Checkbox.js","components/UI/InputText/InputText.js","components/Todos/TodoItem/TodoItem.js","components/Todos/Todos.js","containers/TodoController/TodoController.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","TodoItemEditInput","TextAndControls","TodoItemEdit","isCompleted","Text","RemoveBtn","ToggleBtn","Ctas","TodoController","TodoControllerInputText","AllBtn","ActiveBtn","CompletedBtn","Active","Modal","Backdrop","auxx","props","children","modal","show","react_default","a","createElement","className","classes","backdrop","layout","Auxx","button","onClick","clicked","title","checkbox","type","onChange","changed","defaultChecked","isChecked","inputText","console","log","blured","autoFocus","autofocus","onKeyUp","keyup","defaultValue","dfValue","onBlur","placeholder","todoItem","todoItemClass","push","editable","join","onDoubleClick","editTodoFn","text","Checkbox","toggleComplete","Button","removeTodoFn","InputText","removeEditState","todo","todos","map","index","key","id","isDone","editing","bind","state","nowShowing","inputKeyupHandler","event","keyCode","target","value","randomID","Math","random","toString","substr","newTodo","updatedTodos","concat","Object","toConsumableArray","_this","setState","alert","editTodoHandler","removeEditStateHandler","removeTodoHandler","filteredTodos","filter","toggleCompletehandler","forEach","allBtnHandler","activeBtnHandler","completedBtnHandler","_this2","this","showTheseTodos","Todos","Component","App","Layout","containers_TodoController_TodoController","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.806c2994.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoItem\":\"TodoItem_TodoItem__3b9lI\",\"TodoItemEditInput\":\"TodoItem_TodoItemEditInput__25wR6\",\"TextAndControls\":\"TodoItem_TextAndControls__2y0ZL\",\"TodoItemEdit\":\"TodoItem_TodoItemEdit__29YFz\",\"isCompleted\":\"TodoItem_isCompleted__2uln6\",\"Text\":\"TodoItem_Text__1B3r0\",\"RemoveBtn\":\"TodoItem_RemoveBtn__28TcM\",\"ToggleBtn\":\"TodoItem_ToggleBtn__2rzI5\",\"Ctas\":\"TodoItem_Ctas__LkL_Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoController\":\"TodoController_TodoController__2bAzX\",\"TodoControllerInputText\":\"TodoController_TodoControllerInputText__agGQr\",\"AllBtn\":\"TodoController_AllBtn__3-gbX\",\"ActiveBtn\":\"TodoController_ActiveBtn__2Ximn\",\"CompletedBtn\":\"TodoController_CompletedBtn__2VDJt\",\"Active\":\"TodoController_Active__dhLk6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__stTre\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2BLvH\"};","const auxx = (props) => props.children;\r\n\r\nexport default auxx;","import React from 'react';\r\n\r\nimport classes from './Modal.module.css';\r\n\r\nconst modal = (props) => {\r\n    return props.show ?\r\n    <div className={classes.Modal}>{props.children}</div> : null;\r\n};\r\n\r\nexport default modal;","import React from 'react';\r\n\r\nimport classes from \"./Backdrop.module.css\";\r\n\r\nconst backdrop = (props) => {\r\n    return props.show ?\r\n    <div className={classes.Backdrop}></div> : null;\r\n};\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nimport Auxx from '../Auxx/Auxx';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport Backdrop from '../../components/UI/Backdrop/Backdrop';\r\n\r\nconst layout = (props) => (\r\n    <Auxx>\r\n        <Modal>Something</Modal>\r\n        <Backdrop />\r\n        {props.children}\r\n    </Auxx>\r\n);\r\n\r\n\r\nexport default layout;","import React from 'react';\r\n\r\nconst button = (props) => (\r\n    <button \r\n        onClick={props.clicked} \r\n        className={props.className} \r\n        title={props.title}>{props.children}</button>\r\n);\r\n\r\nexport default button;","import React from 'react';\r\n\r\nconst checkbox = (props) => (\r\n    <input \r\n        type=\"checkbox\" \r\n        onChange={props.changed} \r\n        className={props.className} \r\n        title={props.title} \r\n        defaultChecked={props.isChecked}/>\r\n);\r\n\r\nexport default checkbox;","import React from 'react';\r\n\r\n// import classes from './InputText.module.css';\r\n\r\nconst inputText = (props) => {\r\n    console.log(props.blured);\r\n    return (\r\n        <input \r\n            type=\"text\" \r\n            autoFocus={props.autofocus} \r\n            onKeyUp={props.keyup} \r\n            className={props.className} \r\n            defaultValue={props.dfValue} \r\n            onBlur={props.blured} \r\n            placeholder={props.placeholder}/>\r\n    )\r\n};\r\n\r\nexport default inputText;","import React from 'react';\r\n\r\nimport classes from './TodoItem.module.css';\r\nimport Button from '../../UI/Button/Button';\r\nimport Checkbox from '../../UI/Checkbox/Checkbox';\r\nimport InputText from '../../UI/InputText/InputText';\r\n\r\nconst todoItem = (props) => {\r\n    let todoItemClass = [classes.TodoItem];\r\n\r\n    // if todo is completed then strikethrough it\r\n    if (props.isCompleted) {\r\n        todoItemClass.push(classes.isCompleted);\r\n    }\r\n\r\n    if (props.editable) {\r\n        todoItemClass.push(classes.TodoItemEdit);\r\n    }\r\n\r\n    return (\r\n        <div className={todoItemClass.join(' ')}>\r\n            <div className={classes.TextAndControls}>\r\n                <div \r\n                    className={classes.Text} \r\n                    onDoubleClick={props.editTodoFn}>{props.text}</div>\r\n                <div className={classes.Ctas}>\r\n                    <Checkbox \r\n                        className={classes.ToggleBtn} \r\n                        title=\"Mark as completed\" \r\n                        isChecked={props.isCompleted}\r\n                        changed={props.toggleComplete}/>\r\n\r\n                    <Button \r\n                        className={classes.RemoveBtn} \r\n                        title=\"Remove todo?\" \r\n                        clicked={props.removeTodoFn}>&times;</Button>\r\n                </div>\r\n            </div>\r\n            {\r\n                props.editable ? <InputText \r\n                className={classes.TodoItemEditInput} \r\n                dfValue={props.text} \r\n                autofocus={true} \r\n                blured={props.removeEditState} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default todoItem;","import React from 'react';\r\n\r\nimport TodoItem from './TodoItem/TodoItem';\r\nimport Auxx from '../../hoc/Auxx/Auxx';\r\n\r\nconst todo = (props) => {\r\n    let todos = props.todos.map((todo, index) => {\r\n        return <TodoItem \r\n            text={todo.text} \r\n            key={todo.id} \r\n            isCompleted={todo.isDone} \r\n            editable={props.editing === todo.id ? true : false} \r\n            removeEditState={props.removeEditState}\r\n            removeTodoFn={props.removeTodoFn.bind(null, todo.id)} \r\n            editTodoFn={props.editTodoFn.bind(null, todo.id)}\r\n            toggleComplete={props.toggleComplete.bind(null, todo.id)} />\r\n    });\r\n\r\n    return (\r\n        <Auxx>\r\n            {todos}\r\n        </Auxx>\r\n    )\r\n}\r\n\r\nexport default todo;","import React, { Component } from 'react';\r\n\r\nimport classes from './TodoController.module.css';\r\nimport Todos from '../../components/Todos/Todos';\r\nimport InputText from '../../components/UI/InputText/InputText';\r\nimport Button from '../../components/UI/Button/Button';\r\n\r\nclass TodoController extends Component {\r\n\r\n    state = {\r\n        nowShowing: 'all',\r\n        editing: null,\r\n        todos: [\r\n            { id: 'dsa221', text: 'Make website logo smaller', isDone: false },\r\n            { id: '45sdrL', text: 'Add cookie stripe', isDone: true },\r\n            { id: 'rg1Od', text: 'Remove .html extension and convert in .php', isDone: false },\r\n            { id: 'KiPs2', text: 'Add this gif in all industries pages and home page', isDone: false }\r\n        ]\r\n    }\r\n\r\n    inputKeyupHandler = (event) => {\r\n        if (event.keyCode === 13 && event.target.value !== '') {\r\n            var randomID = Math.random().toString(36).substr(2, 5);\r\n            let newTodo = {\r\n                text: event.target.value,\r\n                id: randomID,\r\n                isDone: false\r\n            }\r\n            let updatedTodos = [\r\n                ...this.state.todos,\r\n                newTodo\r\n            ];\r\n            this.setState({todos: updatedTodos});\r\n\r\n            event.target.value = '';\r\n        } else if (event.keyCode === 13 && event.target.value === '') {\r\n            alert(\"Please enter something first...\");\r\n        } else {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    editTodoHandler = (id) => {\r\n        this.setState({editing: id});\r\n    }\r\n\r\n    removeEditStateHandler = () => {\r\n        this.setState({editing: null});\r\n    }\r\n\r\n    removeTodoHandler = (id) => {\r\n        console.log(\"inside removew todo handler\")\r\n        var filteredTodos = this.state.todos.filter(todo => {\r\n            return todo.id !== id;\r\n        });\r\n\r\n        this.setState({todos: filteredTodos});\r\n    }\r\n\r\n    toggleCompletehandler = (id) => {\r\n        var updatedTodos = [\r\n            ...this.state.todos\r\n        ];\r\n        \r\n        updatedTodos.forEach(todo => {\r\n            if (todo.id === id) {\r\n                todo.isDone = !todo.isDone;\r\n            }\r\n        })\r\n\r\n        this.setState({todos: updatedTodos});\r\n    }\r\n\r\n    allBtnHandler = () => {\r\n        this.setState({nowShowing: 'all'});\r\n    }\r\n\r\n    activeBtnHandler = () => {\r\n        this.setState({nowShowing: 'active'});\r\n    }\r\n\r\n    completedBtnHandler = () => {\r\n        this.setState({nowShowing: 'completed'});\r\n    }\r\n\r\n    render() {\r\n        // show todos w.r.t state\r\n        let showTheseTodos = this.state.todos.filter(todo => {\r\n            switch(this.state.nowShowing) {\r\n                case 'active':\r\n                    return !todo.isDone;\r\n                case 'completed':\r\n                    return todo.isDone;\r\n                default:\r\n                    return true;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div className={classes.TodoController}>\r\n                <InputText \r\n                    className={classes.TodoControllerInputText} \r\n                    autofocus={true} \r\n                    placeholder=\"What needs to be done ?\" \r\n                    keyup={this.inputKeyupHandler} />\r\n                <Button \r\n                    className={`${classes.AllBtn} ${this.state.nowShowing === 'all' ? classes.Active : null}`} \r\n                    clicked={this.allBtnHandler}>All</Button>\r\n                <Button \r\n                    className={`${classes.ActiveBtn} ${this.state.nowShowing === 'active' ? classes.Active : null}`}\r\n                    clicked={this.activeBtnHandler}>Active</Button>\r\n                <Button \r\n                    className={`${classes.CompletedBtn} ${this.state.nowShowing === 'completed' ? classes.Active : null}`}\r\n                    clicked={this.completedBtnHandler}>Completed</Button>\r\n                <Todos \r\n                    todos={showTheseTodos} \r\n                    removeTodoFn={this.removeTodoHandler} \r\n                    editTodoFn={this.editTodoHandler} \r\n                    removeEditState={this.removeEditStateHandler} \r\n                    editing={this.state.editing} \r\n                    toggleComplete={this.toggleCompletehandler}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoController;","import React, { Component } from 'react';\n\nimport Layout from './hoc/Layout/Layout';\nimport TodoController from './containers/TodoController/TodoController';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <TodoController />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}